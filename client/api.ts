/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface StatsAllChartsHashratesOut
 */
export interface StatsAllChartsHashratesOut {
    /**
     * 
     * @type {number}
     * @memberof StatsAllChartsHashratesOut
     */
    'timestamp': number;
    /**
     * 
     * @type {number}
     * @memberof StatsAllChartsHashratesOut
     */
    'hashrate': number;
    /**
     * 
     * @type {number}
     * @memberof StatsAllChartsHashratesOut
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface StatsAlphSupply
 */
export interface StatsAlphSupply {
    /**
     * 
     * @type {number}
     * @memberof StatsAlphSupply
     */
    'supply': number;
}
/**
 * 
 * @export
 * @interface StatsAverageBlockTimes
 */
export interface StatsAverageBlockTimes {
    /**
     * 
     * @type {number}
     * @memberof StatsAverageBlockTimes
     */
    'chain_from': number;
    /**
     * 
     * @type {number}
     * @memberof StatsAverageBlockTimes
     */
    'chain_to': number;
    /**
     * 
     * @type {number}
     * @memberof StatsAverageBlockTimes
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof StatsAverageBlockTimes
     */
    'duration': number;
}
/**
 * 
 * @export
 * @interface StatsBalanceGroupOut
 */
export interface StatsBalanceGroupOut {
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'balance': string;
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'balance_hint': string;
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'locked_balance': string;
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'locked_balance_hint': string;
    /**
     * 
     * @type {number}
     * @memberof StatsBalanceGroupOut
     */
    'utxo_num': number;
    /**
     * 
     * @type {number}
     * @memberof StatsBalanceGroupOut
     */
    'group': number;
}
/**
 * 
 * @export
 * @interface StatsBlockFlowChainInfoOut
 */
export interface StatsBlockFlowChainInfoOut {
    /**
     * 
     * @type {number}
     * @memberof StatsBlockFlowChainInfoOut
     */
    'current_height': number;
}
/**
 * 
 * @export
 * @interface StatsChartsTransactionCountOut
 */
export interface StatsChartsTransactionCountOut {
    /**
     * 
     * @type {number}
     * @memberof StatsChartsTransactionCountOut
     */
    'timestamp': number;
    /**
     * 
     * @type {number}
     * @memberof StatsChartsTransactionCountOut
     */
    'total_count_all_chains': number;
}
/**
 * 
 * @export
 * @interface StatsCurrentDifficultyOut
 */
export interface StatsCurrentDifficultyOut {
    /**
     * 
     * @type {string}
     * @memberof StatsCurrentDifficultyOut
     */
    'difficulty': string;
}
/**
 * 
 * @export
 * @interface StatsCurrentHashrateOut
 */
export interface StatsCurrentHashrateOut {
    /**
     * 
     * @type {string}
     * @memberof StatsCurrentHashrateOut
     */
    'hashrate': string;
}
/**
 * 
 * @export
 * @interface StatsHistoryHashrateOut
 */
export interface StatsHistoryHashrateOut {
    /**
     * 
     * @type {string}
     * @memberof StatsHistoryHashrateOut
     */
    'hashrate': string;
}
/**
 * 
 * @export
 * @interface StatsInfoHeightsOut
 */
export interface StatsInfoHeightsOut {
    /**
     * 
     * @type {number}
     * @memberof StatsInfoHeightsOut
     */
    'chain_from': number;
    /**
     * 
     * @type {number}
     * @memberof StatsInfoHeightsOut
     */
    'chain_to': number;
    /**
     * 
     * @type {number}
     * @memberof StatsInfoHeightsOut
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof StatsInfoHeightsOut
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface StatsTotalTransactions
 */
export interface StatsTotalTransactions {
    /**
     * 
     * @type {number}
     * @memberof StatsTotalTransactions
     */
    'amount': number;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const SupplyType = {
    Total: 'total',
    Circulating: 'circulating',
    Reserved: 'reserved',
    Locked: 'locked'
} as const;

export type SupplyType = typeof SupplyType[keyof typeof SupplyType];


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const TimeInterval = {
    Daily: 'daily',
    Hourly: 'hourly',
    Weekly: 'weekly'
} as const;

export type TimeInterval = typeof TimeInterval[keyof typeof TimeInterval];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Charts Hashrates
         * @param {number} fromTs 
         * @param {number} toTs 
         * @param {TimeInterval} intervalType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsHashratesStatsChartsHashratesGet: async (fromTs: number, toTs: number, intervalType: TimeInterval, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getAllChartsHashratesStatsChartsHashratesGet', 'fromTs', fromTs)
            // verify required parameter 'toTs' is not null or undefined
            assertParamExists('getAllChartsHashratesStatsChartsHashratesGet', 'toTs', toTs)
            // verify required parameter 'intervalType' is not null or undefined
            assertParamExists('getAllChartsHashratesStatsChartsHashratesGet', 'intervalType', intervalType)
            const localVarPath = `/stats/charts/hashrates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }

            if (intervalType !== undefined) {
                localVarQueryParameter['interval_type'] = intervalType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Charts Transaction Count
         * @param {number} fromTs 
         * @param {number} toTs 
         * @param {TimeInterval} intervalType 
         * @param {boolean} perChain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsTransactionCountStatsChartsTransactionsCountGet: async (fromTs: number, toTs: number, intervalType: TimeInterval, perChain: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'fromTs', fromTs)
            // verify required parameter 'toTs' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'toTs', toTs)
            // verify required parameter 'intervalType' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'intervalType', intervalType)
            // verify required parameter 'perChain' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'perChain', perChain)
            const localVarPath = `/stats/charts/transactions-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }

            if (intervalType !== undefined) {
                localVarQueryParameter['interval_type'] = intervalType;
            }

            if (perChain !== undefined) {
                localVarQueryParameter['per_chain'] = perChain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Alph Supply
         * @param {SupplyType} supplyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlphSupplyStatsAlphSupplyGet: async (supplyType: SupplyType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplyType' is not null or undefined
            assertParamExists('getAlphSupplyStatsAlphSupplyGet', 'supplyType', supplyType)
            const localVarPath = `/stats/alph-supply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (supplyType !== undefined) {
                localVarQueryParameter['supply_type'] = supplyType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Average Block Times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageBlockTimesStatsAverageBlocktimesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/average-blocktimes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Balance And Group By Address
         * @param {string} address 
         * @param {boolean} [mempool] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceAndGroupByAddressStatsAddressesGet: async (address: string, mempool?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getBalanceAndGroupByAddressStatsAddressesGet', 'address', address)
            const localVarPath = `/stats/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (mempool !== undefined) {
                localVarQueryParameter['mempool'] = mempool;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Block Flow Chain Info
         * @param {number} fromGroup 
         * @param {number} toGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockFlowChainInfoStatsBlockflowChainInfoGet: async (fromGroup: number, toGroup: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromGroup' is not null or undefined
            assertParamExists('getBlockFlowChainInfoStatsBlockflowChainInfoGet', 'fromGroup', fromGroup)
            // verify required parameter 'toGroup' is not null or undefined
            assertParamExists('getBlockFlowChainInfoStatsBlockflowChainInfoGet', 'toGroup', toGroup)
            const localVarPath = `/stats/blockflow/chain-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fromGroup !== undefined) {
                localVarQueryParameter['from_group'] = fromGroup;
            }

            if (toGroup !== undefined) {
                localVarQueryParameter['to_group'] = toGroup;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Current Difficulty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDifficultyStatsInfoCurrentDifficultyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/info/current-difficulty`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Current Hashrate
         * @param {number} [timespan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentHashrateStatsInfoHashrateCurrentGet: async (timespan?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/info/hashrate/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (timespan !== undefined) {
                localVarQueryParameter['timespan'] = timespan;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Historic Hashrate
         * @param {number} fromTs 
         * @param {number} [toTs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricHashrateStatsInfoHashrateHistoricGet: async (fromTs: number, toTs?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getHistoricHashrateStatsInfoHashrateHistoricGet', 'fromTs', fromTs)
            const localVarPath = `/stats/info/hashrate/historic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Info Heights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoHeightsStatsInfoHeightsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/info/heights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Total Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalTransactionsStatsTotalTransactionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/total-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Trigger Route Block Data
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerRouteBlockDataStreamsTriggerPost: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('triggerRouteBlockDataStreamsTriggerPost', 'body', body)
            const localVarPath = `/streams/trigger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Charts Hashrates
         * @param {number} fromTs 
         * @param {number} toTs 
         * @param {TimeInterval} intervalType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllChartsHashratesStatsChartsHashratesGet(fromTs: number, toTs: number, intervalType: TimeInterval, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsAllChartsHashratesOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllChartsHashratesStatsChartsHashratesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Charts Transaction Count
         * @param {number} fromTs 
         * @param {number} toTs 
         * @param {TimeInterval} intervalType 
         * @param {boolean} perChain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs: number, toTs: number, intervalType: TimeInterval, perChain: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsChartsTransactionCountOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllChartsTransactionCountStatsChartsTransactionsCountGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Alph Supply
         * @param {SupplyType} supplyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlphSupplyStatsAlphSupplyGet(supplyType: SupplyType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsAlphSupply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlphSupplyStatsAlphSupplyGet(supplyType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAlphSupplyStatsAlphSupplyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Average Block Times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAverageBlockTimesStatsAverageBlocktimesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsAverageBlockTimes>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAverageBlockTimesStatsAverageBlocktimesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAverageBlockTimesStatsAverageBlocktimesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Balance And Group By Address
         * @param {string} address 
         * @param {boolean} [mempool] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceAndGroupByAddressStatsAddressesGet(address: string, mempool?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsBalanceGroupOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getBalanceAndGroupByAddressStatsAddressesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Block Flow Chain Info
         * @param {number} fromGroup 
         * @param {number} toGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup: number, toGroup: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsBlockFlowChainInfoOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getBlockFlowChainInfoStatsBlockflowChainInfoGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Current Difficulty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentDifficultyStatsInfoCurrentDifficultyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsCurrentDifficultyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentDifficultyStatsInfoCurrentDifficultyGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCurrentDifficultyStatsInfoCurrentDifficultyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Current Hashrate
         * @param {number} [timespan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentHashrateStatsInfoHashrateCurrentGet(timespan?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsCurrentHashrateOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCurrentHashrateStatsInfoHashrateCurrentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Historic Hashrate
         * @param {number} fromTs 
         * @param {number} [toTs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs: number, toTs?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsHistoryHashrateOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getHistoricHashrateStatsInfoHashrateHistoricGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Info Heights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfoHeightsStatsInfoHeightsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsInfoHeightsOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfoHeightsStatsInfoHeightsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getInfoHeightsStatsInfoHeightsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Total Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalTransactionsStatsTotalTransactionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsTotalTransactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalTransactionsStatsTotalTransactionsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getTotalTransactionsStatsTotalTransactionsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Trigger Route Block Data
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerRouteBlockDataStreamsTriggerPost(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerRouteBlockDataStreamsTriggerPost(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.triggerRouteBlockDataStreamsTriggerPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Charts Hashrates
         * @param {number} fromTs 
         * @param {number} toTs 
         * @param {TimeInterval} intervalType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsHashratesStatsChartsHashratesGet(fromTs: number, toTs: number, intervalType: TimeInterval, options?: any): AxiosPromise<Array<StatsAllChartsHashratesOut>> {
            return localVarFp.getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Charts Transaction Count
         * @param {number} fromTs 
         * @param {number} toTs 
         * @param {TimeInterval} intervalType 
         * @param {boolean} perChain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs: number, toTs: number, intervalType: TimeInterval, perChain: boolean, options?: any): AxiosPromise<Array<StatsChartsTransactionCountOut>> {
            return localVarFp.getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Alph Supply
         * @param {SupplyType} supplyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlphSupplyStatsAlphSupplyGet(supplyType: SupplyType, options?: any): AxiosPromise<StatsAlphSupply> {
            return localVarFp.getAlphSupplyStatsAlphSupplyGet(supplyType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Average Block Times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageBlockTimesStatsAverageBlocktimesGet(options?: any): AxiosPromise<Array<StatsAverageBlockTimes>> {
            return localVarFp.getAverageBlockTimesStatsAverageBlocktimesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Balance And Group By Address
         * @param {string} address 
         * @param {boolean} [mempool] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceAndGroupByAddressStatsAddressesGet(address: string, mempool?: boolean, options?: any): AxiosPromise<StatsBalanceGroupOut> {
            return localVarFp.getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Block Flow Chain Info
         * @param {number} fromGroup 
         * @param {number} toGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup: number, toGroup: number, options?: any): AxiosPromise<StatsBlockFlowChainInfoOut> {
            return localVarFp.getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Current Difficulty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDifficultyStatsInfoCurrentDifficultyGet(options?: any): AxiosPromise<StatsCurrentDifficultyOut> {
            return localVarFp.getCurrentDifficultyStatsInfoCurrentDifficultyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Current Hashrate
         * @param {number} [timespan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentHashrateStatsInfoHashrateCurrentGet(timespan?: number, options?: any): AxiosPromise<StatsCurrentHashrateOut> {
            return localVarFp.getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Historic Hashrate
         * @param {number} fromTs 
         * @param {number} [toTs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs: number, toTs?: number, options?: any): AxiosPromise<StatsHistoryHashrateOut> {
            return localVarFp.getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Info Heights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoHeightsStatsInfoHeightsGet(options?: any): AxiosPromise<Array<StatsInfoHeightsOut>> {
            return localVarFp.getInfoHeightsStatsInfoHeightsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Total Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalTransactionsStatsTotalTransactionsGet(options?: any): AxiosPromise<StatsTotalTransactions> {
            return localVarFp.getTotalTransactionsStatsTotalTransactionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Trigger Route Block Data
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerRouteBlockDataStreamsTriggerPost(body: object, options?: any): AxiosPromise<any> {
            return localVarFp.triggerRouteBlockDataStreamsTriggerPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get All Charts Hashrates
     * @param {number} fromTs 
     * @param {number} toTs 
     * @param {TimeInterval} intervalType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllChartsHashratesStatsChartsHashratesGet(fromTs: number, toTs: number, intervalType: TimeInterval, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Charts Transaction Count
     * @param {number} fromTs 
     * @param {number} toTs 
     * @param {TimeInterval} intervalType 
     * @param {boolean} perChain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs: number, toTs: number, intervalType: TimeInterval, perChain: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Alph Supply
     * @param {SupplyType} supplyType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAlphSupplyStatsAlphSupplyGet(supplyType: SupplyType, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAlphSupplyStatsAlphSupplyGet(supplyType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Average Block Times
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAverageBlockTimesStatsAverageBlocktimesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAverageBlockTimesStatsAverageBlocktimesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Balance And Group By Address
     * @param {string} address 
     * @param {boolean} [mempool] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBalanceAndGroupByAddressStatsAddressesGet(address: string, mempool?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Block Flow Chain Info
     * @param {number} fromGroup 
     * @param {number} toGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup: number, toGroup: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Current Difficulty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentDifficultyStatsInfoCurrentDifficultyGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentDifficultyStatsInfoCurrentDifficultyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Current Hashrate
     * @param {number} [timespan] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentHashrateStatsInfoHashrateCurrentGet(timespan?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Historic Hashrate
     * @param {number} fromTs 
     * @param {number} [toTs] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs: number, toTs?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Info Heights
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInfoHeightsStatsInfoHeightsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getInfoHeightsStatsInfoHeightsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Total Transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTotalTransactionsStatsTotalTransactionsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTotalTransactionsStatsTotalTransactionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Trigger Route Block Data
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public triggerRouteBlockDataStreamsTriggerPost(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).triggerRouteBlockDataStreamsTriggerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



