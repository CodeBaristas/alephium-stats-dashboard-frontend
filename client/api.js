/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from './base';
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export const SupplyType = {
    Total: 'total',
    Circulating: 'circulating',
    Reserved: 'reserved',
    Locked: 'locked'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export const TimeInterval = {
    Daily: 'daily',
    Hourly: 'hourly',
    Weekly: 'weekly'
};
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get All Charts Hashrates
         * @param {number} fromTs
         * @param {number} toTs
         * @param {TimeInterval} intervalType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsHashratesStatsChartsHashratesGet: async (fromTs, toTs, intervalType, options = {}) => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getAllChartsHashratesStatsChartsHashratesGet', 'fromTs', fromTs);
            // verify required parameter 'toTs' is not null or undefined
            assertParamExists('getAllChartsHashratesStatsChartsHashratesGet', 'toTs', toTs);
            // verify required parameter 'intervalType' is not null or undefined
            assertParamExists('getAllChartsHashratesStatsChartsHashratesGet', 'intervalType', intervalType);
            const localVarPath = `/stats/charts/hashrates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }
            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }
            if (intervalType !== undefined) {
                localVarQueryParameter['interval_type'] = intervalType;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get All Charts Transaction Count
         * @param {number} fromTs
         * @param {number} toTs
         * @param {TimeInterval} intervalType
         * @param {boolean} perChain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsTransactionCountStatsChartsTransactionsCountGet: async (fromTs, toTs, intervalType, perChain, options = {}) => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'fromTs', fromTs);
            // verify required parameter 'toTs' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'toTs', toTs);
            // verify required parameter 'intervalType' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'intervalType', intervalType);
            // verify required parameter 'perChain' is not null or undefined
            assertParamExists('getAllChartsTransactionCountStatsChartsTransactionsCountGet', 'perChain', perChain);
            const localVarPath = `/stats/charts/transactions-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }
            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }
            if (intervalType !== undefined) {
                localVarQueryParameter['interval_type'] = intervalType;
            }
            if (perChain !== undefined) {
                localVarQueryParameter['per_chain'] = perChain;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Alph Supply
         * @param {SupplyType} supplyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlphSupplyStatsAlphSupplyGet: async (supplyType, options = {}) => {
            // verify required parameter 'supplyType' is not null or undefined
            assertParamExists('getAlphSupplyStatsAlphSupplyGet', 'supplyType', supplyType);
            const localVarPath = `/stats/alph-supply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (supplyType !== undefined) {
                localVarQueryParameter['supply_type'] = supplyType;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Average Block Times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageBlockTimesStatsAverageBlocktimesGet: async (options = {}) => {
            const localVarPath = `/stats/average-blocktimes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Balance And Group By Address
         * @param {string} address
         * @param {boolean} [mempool]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceAndGroupByAddressStatsAddressesGet: async (address, mempool, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getBalanceAndGroupByAddressStatsAddressesGet', 'address', address);
            const localVarPath = `/stats/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }
            if (mempool !== undefined) {
                localVarQueryParameter['mempool'] = mempool;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Block Flow Chain Info
         * @param {number} fromGroup
         * @param {number} toGroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockFlowChainInfoStatsBlockflowChainInfoGet: async (fromGroup, toGroup, options = {}) => {
            // verify required parameter 'fromGroup' is not null or undefined
            assertParamExists('getBlockFlowChainInfoStatsBlockflowChainInfoGet', 'fromGroup', fromGroup);
            // verify required parameter 'toGroup' is not null or undefined
            assertParamExists('getBlockFlowChainInfoStatsBlockflowChainInfoGet', 'toGroup', toGroup);
            const localVarPath = `/stats/blockflow/chain-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (fromGroup !== undefined) {
                localVarQueryParameter['from_group'] = fromGroup;
            }
            if (toGroup !== undefined) {
                localVarQueryParameter['to_group'] = toGroup;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Current Difficulty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDifficultyStatsInfoCurrentDifficultyGet: async (options = {}) => {
            const localVarPath = `/stats/info/current-difficulty`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Current Hashrate
         * @param {number} [timespan]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentHashrateStatsInfoHashrateCurrentGet: async (timespan, options = {}) => {
            const localVarPath = `/stats/info/hashrate/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (timespan !== undefined) {
                localVarQueryParameter['timespan'] = timespan;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Historic Hashrate
         * @param {number} fromTs
         * @param {number} [toTs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricHashrateStatsInfoHashrateHistoricGet: async (fromTs, toTs, options = {}) => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getHistoricHashrateStatsInfoHashrateHistoricGet', 'fromTs', fromTs);
            const localVarPath = `/stats/info/hashrate/historic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }
            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Info Heights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoHeightsStatsInfoHeightsGet: async (options = {}) => {
            const localVarPath = `/stats/info/heights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Total Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalTransactionsStatsTotalTransactionsGet: async (options = {}) => {
            const localVarPath = `/stats/total-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Trigger Route Block Data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerRouteBlockDataStreamsTriggerPost: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('triggerRouteBlockDataStreamsTriggerPost', 'body', body);
            const localVarPath = `/streams/trigger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get All Charts Hashrates
         * @param {number} fromTs
         * @param {number} toTs
         * @param {TimeInterval} intervalType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getAllChartsHashratesStatsChartsHashratesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get All Charts Transaction Count
         * @param {number} fromTs
         * @param {number} toTs
         * @param {TimeInterval} intervalType
         * @param {boolean} perChain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getAllChartsTransactionCountStatsChartsTransactionsCountGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Alph Supply
         * @param {SupplyType} supplyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlphSupplyStatsAlphSupplyGet(supplyType, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlphSupplyStatsAlphSupplyGet(supplyType, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getAlphSupplyStatsAlphSupplyGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Average Block Times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAverageBlockTimesStatsAverageBlocktimesGet(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAverageBlockTimesStatsAverageBlocktimesGet(options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getAverageBlockTimesStatsAverageBlocktimesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Balance And Group By Address
         * @param {string} address
         * @param {boolean} [mempool]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getBalanceAndGroupByAddressStatsAddressesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Block Flow Chain Info
         * @param {number} fromGroup
         * @param {number} toGroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getBlockFlowChainInfoStatsBlockflowChainInfoGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Current Difficulty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentDifficultyStatsInfoCurrentDifficultyGet(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentDifficultyStatsInfoCurrentDifficultyGet(options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getCurrentDifficultyStatsInfoCurrentDifficultyGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Current Hashrate
         * @param {number} [timespan]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getCurrentHashrateStatsInfoHashrateCurrentGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Historic Hashrate
         * @param {number} fromTs
         * @param {number} [toTs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getHistoricHashrateStatsInfoHashrateHistoricGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Info Heights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfoHeightsStatsInfoHeightsGet(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfoHeightsStatsInfoHeightsGet(options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getInfoHeightsStatsInfoHeightsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Get Total Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalTransactionsStatsTotalTransactionsGet(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalTransactionsStatsTotalTransactionsGet(options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.getTotalTransactionsStatsTotalTransactionsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary Trigger Route Block Data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerRouteBlockDataStreamsTriggerPost(body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerRouteBlockDataStreamsTriggerPost(body, options);
            const index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const operationBasePath = (_c = (_b = operationServerMap['DefaultApi.triggerRouteBlockDataStreamsTriggerPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DefaultApiFp(configuration);
    return {
        /**
         *
         * @summary Get All Charts Hashrates
         * @param {number} fromTs
         * @param {number} toTs
         * @param {TimeInterval} intervalType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options) {
            return localVarFp.getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get All Charts Transaction Count
         * @param {number} fromTs
         * @param {number} toTs
         * @param {TimeInterval} intervalType
         * @param {boolean} perChain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options) {
            return localVarFp.getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Alph Supply
         * @param {SupplyType} supplyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlphSupplyStatsAlphSupplyGet(supplyType, options) {
            return localVarFp.getAlphSupplyStatsAlphSupplyGet(supplyType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Average Block Times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageBlockTimesStatsAverageBlocktimesGet(options) {
            return localVarFp.getAverageBlockTimesStatsAverageBlocktimesGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Balance And Group By Address
         * @param {string} address
         * @param {boolean} [mempool]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options) {
            return localVarFp.getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Block Flow Chain Info
         * @param {number} fromGroup
         * @param {number} toGroup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options) {
            return localVarFp.getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Current Difficulty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDifficultyStatsInfoCurrentDifficultyGet(options) {
            return localVarFp.getCurrentDifficultyStatsInfoCurrentDifficultyGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Current Hashrate
         * @param {number} [timespan]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options) {
            return localVarFp.getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Historic Hashrate
         * @param {number} fromTs
         * @param {number} [toTs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options) {
            return localVarFp.getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Info Heights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoHeightsStatsInfoHeightsGet(options) {
            return localVarFp.getInfoHeightsStatsInfoHeightsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Total Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalTransactionsStatsTotalTransactionsGet(options) {
            return localVarFp.getTotalTransactionsStatsTotalTransactionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Trigger Route Block Data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerRouteBlockDataStreamsTriggerPost(body, options) {
            return localVarFp.triggerRouteBlockDataStreamsTriggerPost(body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Get All Charts Hashrates
     * @param {number} fromTs
     * @param {number} toTs
     * @param {TimeInterval} intervalType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options) {
        return DefaultApiFp(this.configuration).getAllChartsHashratesStatsChartsHashratesGet(fromTs, toTs, intervalType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get All Charts Transaction Count
     * @param {number} fromTs
     * @param {number} toTs
     * @param {TimeInterval} intervalType
     * @param {boolean} perChain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options) {
        return DefaultApiFp(this.configuration).getAllChartsTransactionCountStatsChartsTransactionsCountGet(fromTs, toTs, intervalType, perChain, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Alph Supply
     * @param {SupplyType} supplyType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAlphSupplyStatsAlphSupplyGet(supplyType, options) {
        return DefaultApiFp(this.configuration).getAlphSupplyStatsAlphSupplyGet(supplyType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Average Block Times
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAverageBlockTimesStatsAverageBlocktimesGet(options) {
        return DefaultApiFp(this.configuration).getAverageBlockTimesStatsAverageBlocktimesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Balance And Group By Address
     * @param {string} address
     * @param {boolean} [mempool]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options) {
        return DefaultApiFp(this.configuration).getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Block Flow Chain Info
     * @param {number} fromGroup
     * @param {number} toGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options) {
        return DefaultApiFp(this.configuration).getBlockFlowChainInfoStatsBlockflowChainInfoGet(fromGroup, toGroup, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Current Difficulty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCurrentDifficultyStatsInfoCurrentDifficultyGet(options) {
        return DefaultApiFp(this.configuration).getCurrentDifficultyStatsInfoCurrentDifficultyGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Current Hashrate
     * @param {number} [timespan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options) {
        return DefaultApiFp(this.configuration).getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Historic Hashrate
     * @param {number} fromTs
     * @param {number} [toTs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options) {
        return DefaultApiFp(this.configuration).getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Info Heights
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getInfoHeightsStatsInfoHeightsGet(options) {
        return DefaultApiFp(this.configuration).getInfoHeightsStatsInfoHeightsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Total Transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTotalTransactionsStatsTotalTransactionsGet(options) {
        return DefaultApiFp(this.configuration).getTotalTransactionsStatsTotalTransactionsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Trigger Route Block Data
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    triggerRouteBlockDataStreamsTriggerPost(body, options) {
        return DefaultApiFp(this.configuration).triggerRouteBlockDataStreamsTriggerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
